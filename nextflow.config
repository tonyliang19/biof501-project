/*
    This hold generic configuration for the pipeline
*/

params {
    samplesheet         = null
    outdir              = null
    sample_metadata     = "data/metadata.csv"
    genome              = 'https://ftp.ensembl.org/pub/release-113/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.MT.fa.gz'
    // genome              = 'https://ftp.ensembl.org/pub/release-113/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.X.fa.gz'
    genome_annotation   = 'https://ftp.ensembl.org/pub/release-113/gtf/homo_sapiens/Homo_sapiens.GRCh38.113.gtf.gz'
    publish_dir_mode    = 'copy'
    // Change to true to get more verbose output for each process
    verbose_debug       = true
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory      =   '4.GB'
    max_cpus        =   8
    max_time        =   '4.h'
}


// Process option cache and their shell option
process {
    cache = 'lenient'
    // Capture exit codes from upstream processes when piping
    shell = ['/bin/bash', '-euo', 'pipefail']

    // For hisat2 ones use same containers
    withName: 'HISAT2.*' {
        container = "quay.io/biocontainers/hisat2:2.2.0--py27he1b5a44_0"

    }
    // For samtools use same containers
    withName: 'SAMTOOLS.*' {
        container = 'quay.io/biocontainers/samtools:1.21--h50ea8bc_0'

    }
}

// Pipeline information after exectuion
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
    // This could be optional to provide
    fields  = 'process, tag, realtime, %cpu,%mem, rss, peak_rss, peak_vmem, duration, memory'
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}


nextflow.enable.moduleBinaries = true

manifest {
    name            =   'dge-analysis'
    author          =   """Tony Liang"""
    homePage        =   'https://github.com/tonyliang19/biof501-dge-analysis'
    description     =   """Differential Gene Expression Analysis using paired-ended RNA sequencing data"""
    mainScript      =   'main.nf'
}

// Load base.config by default
includeConfig 'conf/base.config'

profiles {
    docker {
        autoMounts              = true
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }

    test { includeConfig 'conf/test.config' }
}





// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}